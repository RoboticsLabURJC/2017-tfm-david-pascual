# -*- coding: utf-8 -*-
# **********************************************************************
#
# Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.6.3
#
# <auto-generated>
#
# Generated from file `control.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module jderobot
_M_jderobot = Ice.openModule('jderobot')
__name__ = 'jderobot'

if 'Control' not in _M_jderobot.__dict__:
    _M_jderobot.Control = Ice.createTempClass()
    class Control(Ice.Object):
        """
        Interface to flow control.
        """
        def __init__(self):
            if Ice.getType(self) == _M_jderobot.Control:
                raise RuntimeError('jderobot.Control is an abstract class')

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::jderobot::Control')

        def ice_id(self, current=None):
            return '::jderobot::Control'

        def ice_staticId():
            return '::jderobot::Control'
        ice_staticId = staticmethod(ice_staticId)

        def start(self, current=None):
            pass

        def stop(self, current=None):
            pass

        def pause(self, current=None):
            pass

        def resume(self, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_jderobot._t_Control)

        __repr__ = __str__

    _M_jderobot.ControlPrx = Ice.createTempClass()
    class ControlPrx(Ice.ObjectPrx):

        def start(self, _ctx=None):
            return _M_jderobot.Control._op_start.invoke(self, ((), _ctx))

        def begin_start(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_jderobot.Control._op_start.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_start(self, _r):
            return _M_jderobot.Control._op_start.end(self, _r)

        def stop(self, _ctx=None):
            return _M_jderobot.Control._op_stop.invoke(self, ((), _ctx))

        def begin_stop(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_jderobot.Control._op_stop.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_stop(self, _r):
            return _M_jderobot.Control._op_stop.end(self, _r)

        def pause(self, _ctx=None):
            return _M_jderobot.Control._op_pause.invoke(self, ((), _ctx))

        def begin_pause(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_jderobot.Control._op_pause.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_pause(self, _r):
            return _M_jderobot.Control._op_pause.end(self, _r)

        def resume(self, _ctx=None):
            return _M_jderobot.Control._op_resume.invoke(self, ((), _ctx))

        def begin_resume(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_jderobot.Control._op_resume.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_resume(self, _r):
            return _M_jderobot.Control._op_resume.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_jderobot.ControlPrx.ice_checkedCast(proxy, '::jderobot::Control', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_jderobot.ControlPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::jderobot::Control'
        ice_staticId = staticmethod(ice_staticId)

    _M_jderobot._t_ControlPrx = IcePy.defineProxy('::jderobot::Control', ControlPrx)

    _M_jderobot._t_Control = IcePy.defineClass('::jderobot::Control', Control, -1, (), True, False, None, (), ())
    Control._ice_type = _M_jderobot._t_Control

    Control._op_start = IcePy.Operation('start', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_int, False, 0), ())
    Control._op_stop = IcePy.Operation('stop', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_int, False, 0), ())
    Control._op_pause = IcePy.Operation('pause', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_int, False, 0), ())
    Control._op_resume = IcePy.Operation('resume', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_int, False, 0), ())

    _M_jderobot.Control = Control
    del Control

    _M_jderobot.ControlPrx = ControlPrx
    del ControlPrx

# End of module jderobot
