# -*- coding: utf-8 -*-
# **********************************************************************
#
# Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.6.3
#
# <auto-generated>
#
# Generated from file `replayControl.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module jderobot
_M_jderobot = Ice.openModule('jderobot')
__name__ = 'jderobot'

if 'ReplayerStatus' not in _M_jderobot.__dict__:
    _M_jderobot.ReplayerStatus = Ice.createTempClass()
    class ReplayerStatus(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    ReplayerStatus.WAITING = ReplayerStatus("WAITING", 0)
    ReplayerStatus.PLAYING = ReplayerStatus("PLAYING", 1)
    ReplayerStatus.PAUSED = ReplayerStatus("PAUSED", 2)
    ReplayerStatus.FINISHED = ReplayerStatus("FINISHED", 3)
    ReplayerStatus._enumerators = { 0:ReplayerStatus.WAITING, 1:ReplayerStatus.PLAYING, 2:ReplayerStatus.PAUSED, 3:ReplayerStatus.FINISHED }

    _M_jderobot._t_ReplayerStatus = IcePy.defineEnum('::jderobot::ReplayerStatus', ReplayerStatus, (), ReplayerStatus._enumerators)

    _M_jderobot.ReplayerStatus = ReplayerStatus
    del ReplayerStatus

if 'replayControl' not in _M_jderobot.__dict__:
    _M_jderobot.replayControl = Ice.createTempClass()
    class replayControl(Ice.Object):
        def __init__(self):
            if Ice.getType(self) == _M_jderobot.replayControl:
                raise RuntimeError('jderobot.replayControl is an abstract class')

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::jderobot::replayControl')

        def ice_id(self, current=None):
            return '::jderobot::replayControl'

        def ice_staticId():
            return '::jderobot::replayControl'
        ice_staticId = staticmethod(ice_staticId)

        def pause(self, current=None):
            pass

        def resume(self, current=None):
            pass

        def setReplay(self, replay, current=None):
            pass

        def setStep(self, step, current=None):
            pass

        def getTime(self, current=None):
            pass

        def goTo(self, seek, current=None):
            pass

        def getStatus(self, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_jderobot._t_replayControl)

        __repr__ = __str__

    _M_jderobot.replayControlPrx = Ice.createTempClass()
    class replayControlPrx(Ice.ObjectPrx):

        def pause(self, _ctx=None):
            return _M_jderobot.replayControl._op_pause.invoke(self, ((), _ctx))

        def begin_pause(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_jderobot.replayControl._op_pause.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_pause(self, _r):
            return _M_jderobot.replayControl._op_pause.end(self, _r)

        def resume(self, _ctx=None):
            return _M_jderobot.replayControl._op_resume.invoke(self, ((), _ctx))

        def begin_resume(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_jderobot.replayControl._op_resume.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_resume(self, _r):
            return _M_jderobot.replayControl._op_resume.end(self, _r)

        def setReplay(self, replay, _ctx=None):
            return _M_jderobot.replayControl._op_setReplay.invoke(self, ((replay, ), _ctx))

        def begin_setReplay(self, replay, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_jderobot.replayControl._op_setReplay.begin(self, ((replay, ), _response, _ex, _sent, _ctx))

        def end_setReplay(self, _r):
            return _M_jderobot.replayControl._op_setReplay.end(self, _r)

        def setStep(self, step, _ctx=None):
            return _M_jderobot.replayControl._op_setStep.invoke(self, ((step, ), _ctx))

        def begin_setStep(self, step, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_jderobot.replayControl._op_setStep.begin(self, ((step, ), _response, _ex, _sent, _ctx))

        def end_setStep(self, _r):
            return _M_jderobot.replayControl._op_setStep.end(self, _r)

        def getTime(self, _ctx=None):
            return _M_jderobot.replayControl._op_getTime.invoke(self, ((), _ctx))

        def begin_getTime(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_jderobot.replayControl._op_getTime.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getTime(self, _r):
            return _M_jderobot.replayControl._op_getTime.end(self, _r)

        def goTo(self, seek, _ctx=None):
            return _M_jderobot.replayControl._op_goTo.invoke(self, ((seek, ), _ctx))

        def begin_goTo(self, seek, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_jderobot.replayControl._op_goTo.begin(self, ((seek, ), _response, _ex, _sent, _ctx))

        def end_goTo(self, _r):
            return _M_jderobot.replayControl._op_goTo.end(self, _r)

        def getStatus(self, _ctx=None):
            return _M_jderobot.replayControl._op_getStatus.invoke(self, ((), _ctx))

        def begin_getStatus(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_jderobot.replayControl._op_getStatus.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getStatus(self, _r):
            return _M_jderobot.replayControl._op_getStatus.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_jderobot.replayControlPrx.ice_checkedCast(proxy, '::jderobot::replayControl', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_jderobot.replayControlPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::jderobot::replayControl'
        ice_staticId = staticmethod(ice_staticId)

    _M_jderobot._t_replayControlPrx = IcePy.defineProxy('::jderobot::replayControl', replayControlPrx)

    _M_jderobot._t_replayControl = IcePy.defineClass('::jderobot::replayControl', replayControl, -1, (), True, False, None, (), ())
    replayControl._ice_type = _M_jderobot._t_replayControl

    replayControl._op_pause = IcePy.Operation('pause', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_bool, False, 0), ())
    replayControl._op_resume = IcePy.Operation('resume', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_bool, False, 0), ())
    replayControl._op_setReplay = IcePy.Operation('setReplay', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_bool, False, 0),), (), None, ())
    replayControl._op_setStep = IcePy.Operation('setStep', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), ((), IcePy._t_bool, False, 0), ())
    replayControl._op_getTime = IcePy.Operation('getTime', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_long, False, 0), ())
    replayControl._op_goTo = IcePy.Operation('goTo', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_long, False, 0),), (), ((), IcePy._t_bool, False, 0), ())
    replayControl._op_getStatus = IcePy.Operation('getStatus', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_jderobot._t_ReplayerStatus, False, 0), ())

    _M_jderobot.replayControl = replayControl
    del replayControl

    _M_jderobot.replayControlPrx = replayControlPrx
    del replayControlPrx

# End of module jderobot
