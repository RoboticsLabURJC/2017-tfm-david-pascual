# -*- coding: utf-8 -*-
# **********************************************************************
#
# Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.6.3
#
# <auto-generated>
#
# Generated from file `remoteConfig.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module jderobot
_M_jderobot = Ice.openModule('jderobot')
__name__ = 'jderobot'

if 'remoteConfig' not in _M_jderobot.__dict__:
    _M_jderobot.remoteConfig = Ice.createTempClass()
    class remoteConfig(Ice.Object):
        def __init__(self):
            if Ice.getType(self) == _M_jderobot.remoteConfig:
                raise RuntimeError('jderobot.remoteConfig is an abstract class')

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::jderobot::remoteConfig')

        def ice_id(self, current=None):
            return '::jderobot::remoteConfig'

        def ice_staticId():
            return '::jderobot::remoteConfig'
        ice_staticId = staticmethod(ice_staticId)

        def initConfiguration(self, current=None):
            pass

        def read(self, id, current=None):
            pass

        def write(self, data, id, current=None):
            pass

        def setConfiguration(self, id, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_jderobot._t_remoteConfig)

        __repr__ = __str__

    _M_jderobot.remoteConfigPrx = Ice.createTempClass()
    class remoteConfigPrx(Ice.ObjectPrx):

        def initConfiguration(self, _ctx=None):
            return _M_jderobot.remoteConfig._op_initConfiguration.invoke(self, ((), _ctx))

        def begin_initConfiguration(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_jderobot.remoteConfig._op_initConfiguration.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_initConfiguration(self, _r):
            return _M_jderobot.remoteConfig._op_initConfiguration.end(self, _r)

        def read(self, id, _ctx=None):
            return _M_jderobot.remoteConfig._op_read.invoke(self, ((id, ), _ctx))

        def begin_read(self, id, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_jderobot.remoteConfig._op_read.begin(self, ((id, ), _response, _ex, _sent, _ctx))

        def end_read(self, _r):
            return _M_jderobot.remoteConfig._op_read.end(self, _r)

        def write(self, data, id, _ctx=None):
            return _M_jderobot.remoteConfig._op_write.invoke(self, ((data, id), _ctx))

        def begin_write(self, data, id, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_jderobot.remoteConfig._op_write.begin(self, ((data, id), _response, _ex, _sent, _ctx))

        def end_write(self, _r):
            return _M_jderobot.remoteConfig._op_write.end(self, _r)

        def setConfiguration(self, id, _ctx=None):
            return _M_jderobot.remoteConfig._op_setConfiguration.invoke(self, ((id, ), _ctx))

        def begin_setConfiguration(self, id, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_jderobot.remoteConfig._op_setConfiguration.begin(self, ((id, ), _response, _ex, _sent, _ctx))

        def end_setConfiguration(self, _r):
            return _M_jderobot.remoteConfig._op_setConfiguration.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_jderobot.remoteConfigPrx.ice_checkedCast(proxy, '::jderobot::remoteConfig', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_jderobot.remoteConfigPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::jderobot::remoteConfig'
        ice_staticId = staticmethod(ice_staticId)

    _M_jderobot._t_remoteConfigPrx = IcePy.defineProxy('::jderobot::remoteConfig', remoteConfigPrx)

    _M_jderobot._t_remoteConfig = IcePy.defineClass('::jderobot::remoteConfig', remoteConfig, -1, (), True, False, None, (), ())
    remoteConfig._ice_type = _M_jderobot._t_remoteConfig

    remoteConfig._op_initConfiguration = IcePy.Operation('initConfiguration', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_int, False, 0), ())
    remoteConfig._op_read = IcePy.Operation('read', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), ((), IcePy._t_string, False, 0), ())
    remoteConfig._op_write = IcePy.Operation('write', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0)), (), ((), IcePy._t_int, False, 0), ())
    remoteConfig._op_setConfiguration = IcePy.Operation('setConfiguration', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), ((), IcePy._t_int, False, 0), ())

    _M_jderobot.remoteConfig = remoteConfig
    del remoteConfig

    _M_jderobot.remoteConfigPrx = remoteConfigPrx
    del remoteConfigPrx

# End of module jderobot
