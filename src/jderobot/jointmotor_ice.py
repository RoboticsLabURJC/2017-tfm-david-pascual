# -*- coding: utf-8 -*-
# **********************************************************************
#
# Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.6.3
#
# <auto-generated>
#
# Generated from file `jointmotor.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module RoboCompJointMotor
_M_RoboCompJointMotor = Ice.openModule('RoboCompJointMotor')
__name__ = 'RoboCompJointMotor'

if 'HardwareFailedException' not in _M_RoboCompJointMotor.__dict__:
    _M_RoboCompJointMotor.HardwareFailedException = Ice.createTempClass()
    class HardwareFailedException(Ice.UserException):
        def __init__(self, what=''):
            self.what = what

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_name = 'RoboCompJointMotor::HardwareFailedException'

    _M_RoboCompJointMotor._t_HardwareFailedException = IcePy.defineException('::RoboCompJointMotor::HardwareFailedException', HardwareFailedException, (), False, None, (('what', (), IcePy._t_string, False, 0),))
    HardwareFailedException._ice_type = _M_RoboCompJointMotor._t_HardwareFailedException

    _M_RoboCompJointMotor.HardwareFailedException = HardwareFailedException
    del HardwareFailedException

if 'OutOfRangeException' not in _M_RoboCompJointMotor.__dict__:
    _M_RoboCompJointMotor.OutOfRangeException = Ice.createTempClass()
    class OutOfRangeException(Ice.UserException):
        def __init__(self, what=''):
            self.what = what

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_name = 'RoboCompJointMotor::OutOfRangeException'

    _M_RoboCompJointMotor._t_OutOfRangeException = IcePy.defineException('::RoboCompJointMotor::OutOfRangeException', OutOfRangeException, (), False, None, (('what', (), IcePy._t_string, False, 0),))
    OutOfRangeException._ice_type = _M_RoboCompJointMotor._t_OutOfRangeException

    _M_RoboCompJointMotor.OutOfRangeException = OutOfRangeException
    del OutOfRangeException

if 'UnknownMotorException' not in _M_RoboCompJointMotor.__dict__:
    _M_RoboCompJointMotor.UnknownMotorException = Ice.createTempClass()
    class UnknownMotorException(Ice.UserException):
        def __init__(self, what=''):
            self.what = what

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_name = 'RoboCompJointMotor::UnknownMotorException'

    _M_RoboCompJointMotor._t_UnknownMotorException = IcePy.defineException('::RoboCompJointMotor::UnknownMotorException', UnknownMotorException, (), False, None, (('what', (), IcePy._t_string, False, 0),))
    UnknownMotorException._ice_type = _M_RoboCompJointMotor._t_UnknownMotorException

    _M_RoboCompJointMotor.UnknownMotorException = UnknownMotorException
    del UnknownMotorException

if 'MotorState' not in _M_RoboCompJointMotor.__dict__:
    _M_RoboCompJointMotor.MotorState = Ice.createTempClass()
    class MotorState(object):
        def __init__(self, pos=0.0, vel=0.0, power=0.0, timeStamp='', p=0, v=0, isMoving=False):
            self.pos = pos
            self.vel = vel
            self.power = power
            self.timeStamp = timeStamp
            self.p = p
            self.v = v
            self.isMoving = isMoving

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_RoboCompJointMotor.MotorState):
                return NotImplemented
            else:
                if self.pos != other.pos:
                    return False
                if self.vel != other.vel:
                    return False
                if self.power != other.power:
                    return False
                if self.timeStamp != other.timeStamp:
                    return False
                if self.p != other.p:
                    return False
                if self.v != other.v:
                    return False
                if self.isMoving != other.isMoving:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_RoboCompJointMotor._t_MotorState)

        __repr__ = __str__

    _M_RoboCompJointMotor._t_MotorState = IcePy.defineStruct('::RoboCompJointMotor::MotorState', MotorState, (), (
        ('pos', (), IcePy._t_float),
        ('vel', (), IcePy._t_float),
        ('power', (), IcePy._t_float),
        ('timeStamp', (), IcePy._t_string),
        ('p', (), IcePy._t_int),
        ('v', (), IcePy._t_int),
        ('isMoving', (), IcePy._t_bool)
    ))

    _M_RoboCompJointMotor.MotorState = MotorState
    del MotorState

if '_t_MotorStateMap' not in _M_RoboCompJointMotor.__dict__:
    _M_RoboCompJointMotor._t_MotorStateMap = IcePy.defineDictionary('::RoboCompJointMotor::MotorStateMap', (), IcePy._t_string, _M_RoboCompJointMotor._t_MotorState)

if 'MotorParams' not in _M_RoboCompJointMotor.__dict__:
    _M_RoboCompJointMotor.MotorParams = Ice.createTempClass()
    class MotorParams(object):
        def __init__(self, name='', busId=0, minPos=0.0, maxPos=0.0, maxVelocity=0.0, zeroPos=0.0, invertedSign=False):
            self.name = name
            self.busId = busId
            self.minPos = minPos
            self.maxPos = maxPos
            self.maxVelocity = maxVelocity
            self.zeroPos = zeroPos
            self.invertedSign = invertedSign

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_RoboCompJointMotor.MotorParams):
                return NotImplemented
            else:
                if self.name != other.name:
                    return False
                if self.busId != other.busId:
                    return False
                if self.minPos != other.minPos:
                    return False
                if self.maxPos != other.maxPos:
                    return False
                if self.maxVelocity != other.maxVelocity:
                    return False
                if self.zeroPos != other.zeroPos:
                    return False
                if self.invertedSign != other.invertedSign:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_RoboCompJointMotor._t_MotorParams)

        __repr__ = __str__

    _M_RoboCompJointMotor._t_MotorParams = IcePy.defineStruct('::RoboCompJointMotor::MotorParams', MotorParams, (), (
        ('name', (), IcePy._t_string),
        ('busId', (), IcePy._t_byte),
        ('minPos', (), IcePy._t_float),
        ('maxPos', (), IcePy._t_float),
        ('maxVelocity', (), IcePy._t_float),
        ('zeroPos', (), IcePy._t_float),
        ('invertedSign', (), IcePy._t_bool)
    ))

    _M_RoboCompJointMotor.MotorParams = MotorParams
    del MotorParams

if '_t_MotorParamsList' not in _M_RoboCompJointMotor.__dict__:
    _M_RoboCompJointMotor._t_MotorParamsList = IcePy.defineSequence('::RoboCompJointMotor::MotorParamsList', (), _M_RoboCompJointMotor._t_MotorParams)

if 'BusParams' not in _M_RoboCompJointMotor.__dict__:
    _M_RoboCompJointMotor.BusParams = Ice.createTempClass()
    class BusParams(object):
        def __init__(self, handler='', device='', numMotors=0, baudRate=0, basicPeriod=0):
            self.handler = handler
            self.device = device
            self.numMotors = numMotors
            self.baudRate = baudRate
            self.basicPeriod = basicPeriod

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.handler)
            _h = 5 * _h + Ice.getHash(self.device)
            _h = 5 * _h + Ice.getHash(self.numMotors)
            _h = 5 * _h + Ice.getHash(self.baudRate)
            _h = 5 * _h + Ice.getHash(self.basicPeriod)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_RoboCompJointMotor.BusParams):
                return NotImplemented
            else:
                if self.handler is None or other.handler is None:
                    if self.handler != other.handler:
                        return (-1 if self.handler is None else 1)
                else:
                    if self.handler < other.handler:
                        return -1
                    elif self.handler > other.handler:
                        return 1
                if self.device is None or other.device is None:
                    if self.device != other.device:
                        return (-1 if self.device is None else 1)
                else:
                    if self.device < other.device:
                        return -1
                    elif self.device > other.device:
                        return 1
                if self.numMotors is None or other.numMotors is None:
                    if self.numMotors != other.numMotors:
                        return (-1 if self.numMotors is None else 1)
                else:
                    if self.numMotors < other.numMotors:
                        return -1
                    elif self.numMotors > other.numMotors:
                        return 1
                if self.baudRate is None or other.baudRate is None:
                    if self.baudRate != other.baudRate:
                        return (-1 if self.baudRate is None else 1)
                else:
                    if self.baudRate < other.baudRate:
                        return -1
                    elif self.baudRate > other.baudRate:
                        return 1
                if self.basicPeriod is None or other.basicPeriod is None:
                    if self.basicPeriod != other.basicPeriod:
                        return (-1 if self.basicPeriod is None else 1)
                else:
                    if self.basicPeriod < other.basicPeriod:
                        return -1
                    elif self.basicPeriod > other.basicPeriod:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_RoboCompJointMotor._t_BusParams)

        __repr__ = __str__

    _M_RoboCompJointMotor._t_BusParams = IcePy.defineStruct('::RoboCompJointMotor::BusParams', BusParams, (), (
        ('handler', (), IcePy._t_string),
        ('device', (), IcePy._t_string),
        ('numMotors', (), IcePy._t_int),
        ('baudRate', (), IcePy._t_int),
        ('basicPeriod', (), IcePy._t_int)
    ))

    _M_RoboCompJointMotor.BusParams = BusParams
    del BusParams

if 'MotorGoalPosition' not in _M_RoboCompJointMotor.__dict__:
    _M_RoboCompJointMotor.MotorGoalPosition = Ice.createTempClass()
    class MotorGoalPosition(object):
        def __init__(self, name='', position=0.0, maxSpeed=0.0):
            self.name = name
            self.position = position
            self.maxSpeed = maxSpeed

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_RoboCompJointMotor.MotorGoalPosition):
                return NotImplemented
            else:
                if self.name != other.name:
                    return False
                if self.position != other.position:
                    return False
                if self.maxSpeed != other.maxSpeed:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_RoboCompJointMotor._t_MotorGoalPosition)

        __repr__ = __str__

    _M_RoboCompJointMotor._t_MotorGoalPosition = IcePy.defineStruct('::RoboCompJointMotor::MotorGoalPosition', MotorGoalPosition, (), (
        ('name', (), IcePy._t_string),
        ('position', (), IcePy._t_float),
        ('maxSpeed', (), IcePy._t_float)
    ))

    _M_RoboCompJointMotor.MotorGoalPosition = MotorGoalPosition
    del MotorGoalPosition

if '_t_MotorGoalPositionList' not in _M_RoboCompJointMotor.__dict__:
    _M_RoboCompJointMotor._t_MotorGoalPositionList = IcePy.defineSequence('::RoboCompJointMotor::MotorGoalPositionList', (), _M_RoboCompJointMotor._t_MotorGoalPosition)

if 'MotorGoalVelocity' not in _M_RoboCompJointMotor.__dict__:
    _M_RoboCompJointMotor.MotorGoalVelocity = Ice.createTempClass()
    class MotorGoalVelocity(object):
        def __init__(self, name='', velocity=0.0, maxAcc=0.0):
            self.name = name
            self.velocity = velocity
            self.maxAcc = maxAcc

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_RoboCompJointMotor.MotorGoalVelocity):
                return NotImplemented
            else:
                if self.name != other.name:
                    return False
                if self.velocity != other.velocity:
                    return False
                if self.maxAcc != other.maxAcc:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_RoboCompJointMotor._t_MotorGoalVelocity)

        __repr__ = __str__

    _M_RoboCompJointMotor._t_MotorGoalVelocity = IcePy.defineStruct('::RoboCompJointMotor::MotorGoalVelocity', MotorGoalVelocity, (), (
        ('name', (), IcePy._t_string),
        ('velocity', (), IcePy._t_float),
        ('maxAcc', (), IcePy._t_float)
    ))

    _M_RoboCompJointMotor.MotorGoalVelocity = MotorGoalVelocity
    del MotorGoalVelocity

if '_t_MotorList' not in _M_RoboCompJointMotor.__dict__:
    _M_RoboCompJointMotor._t_MotorList = IcePy.defineSequence('::RoboCompJointMotor::MotorList', (), IcePy._t_string)

if 'JointMotor' not in _M_RoboCompJointMotor.__dict__:
    _M_RoboCompJointMotor.JointMotor = Ice.createTempClass()
    class JointMotor(Ice.Object):
        def __init__(self):
            if Ice.getType(self) == _M_RoboCompJointMotor.JointMotor:
                raise RuntimeError('RoboCompJointMotor.JointMotor is an abstract class')

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::RoboCompJointMotor::JointMotor')

        def ice_id(self, current=None):
            return '::RoboCompJointMotor::JointMotor'

        def ice_staticId():
            return '::RoboCompJointMotor::JointMotor'
        ice_staticId = staticmethod(ice_staticId)

        def setPosition(self, goal, current=None):
            pass

        def setVelocity(self, goal, current=None):
            pass

        def setSyncPosition(self, listGoals, current=None):
            pass

        def getMotorParams(self, motor, current=None):
            pass

        def getMotorState(self, motor, current=None):
            pass

        def getMotorStateMap(self, mList, current=None):
            pass

        def getAllMotorState(self, current=None):
            pass

        def getAllMotorParams(self, current=None):
            pass

        def getBusParams(self, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_RoboCompJointMotor._t_JointMotor)

        __repr__ = __str__

    _M_RoboCompJointMotor.JointMotorPrx = Ice.createTempClass()
    class JointMotorPrx(Ice.ObjectPrx):

        def setPosition(self, goal, _ctx=None):
            return _M_RoboCompJointMotor.JointMotor._op_setPosition.invoke(self, ((goal, ), _ctx))

        def begin_setPosition(self, goal, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_RoboCompJointMotor.JointMotor._op_setPosition.begin(self, ((goal, ), _response, _ex, _sent, _ctx))

        def end_setPosition(self, _r):
            return _M_RoboCompJointMotor.JointMotor._op_setPosition.end(self, _r)

        def setVelocity(self, goal, _ctx=None):
            return _M_RoboCompJointMotor.JointMotor._op_setVelocity.invoke(self, ((goal, ), _ctx))

        def begin_setVelocity(self, goal, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_RoboCompJointMotor.JointMotor._op_setVelocity.begin(self, ((goal, ), _response, _ex, _sent, _ctx))

        def end_setVelocity(self, _r):
            return _M_RoboCompJointMotor.JointMotor._op_setVelocity.end(self, _r)

        def setSyncPosition(self, listGoals, _ctx=None):
            return _M_RoboCompJointMotor.JointMotor._op_setSyncPosition.invoke(self, ((listGoals, ), _ctx))

        def begin_setSyncPosition(self, listGoals, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_RoboCompJointMotor.JointMotor._op_setSyncPosition.begin(self, ((listGoals, ), _response, _ex, _sent, _ctx))

        def end_setSyncPosition(self, _r):
            return _M_RoboCompJointMotor.JointMotor._op_setSyncPosition.end(self, _r)

        def getMotorParams(self, motor, _ctx=None):
            return _M_RoboCompJointMotor.JointMotor._op_getMotorParams.invoke(self, ((motor, ), _ctx))

        def begin_getMotorParams(self, motor, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_RoboCompJointMotor.JointMotor._op_getMotorParams.begin(self, ((motor, ), _response, _ex, _sent, _ctx))

        def end_getMotorParams(self, _r):
            return _M_RoboCompJointMotor.JointMotor._op_getMotorParams.end(self, _r)

        def getMotorState(self, motor, _ctx=None):
            return _M_RoboCompJointMotor.JointMotor._op_getMotorState.invoke(self, ((motor, ), _ctx))

        def begin_getMotorState(self, motor, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_RoboCompJointMotor.JointMotor._op_getMotorState.begin(self, ((motor, ), _response, _ex, _sent, _ctx))

        def end_getMotorState(self, _r):
            return _M_RoboCompJointMotor.JointMotor._op_getMotorState.end(self, _r)

        def getMotorStateMap(self, mList, _ctx=None):
            return _M_RoboCompJointMotor.JointMotor._op_getMotorStateMap.invoke(self, ((mList, ), _ctx))

        def begin_getMotorStateMap(self, mList, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_RoboCompJointMotor.JointMotor._op_getMotorStateMap.begin(self, ((mList, ), _response, _ex, _sent, _ctx))

        def end_getMotorStateMap(self, _r):
            return _M_RoboCompJointMotor.JointMotor._op_getMotorStateMap.end(self, _r)

        def getAllMotorState(self, _ctx=None):
            return _M_RoboCompJointMotor.JointMotor._op_getAllMotorState.invoke(self, ((), _ctx))

        def begin_getAllMotorState(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_RoboCompJointMotor.JointMotor._op_getAllMotorState.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getAllMotorState(self, _r):
            return _M_RoboCompJointMotor.JointMotor._op_getAllMotorState.end(self, _r)

        def getAllMotorParams(self, _ctx=None):
            return _M_RoboCompJointMotor.JointMotor._op_getAllMotorParams.invoke(self, ((), _ctx))

        def begin_getAllMotorParams(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_RoboCompJointMotor.JointMotor._op_getAllMotorParams.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getAllMotorParams(self, _r):
            return _M_RoboCompJointMotor.JointMotor._op_getAllMotorParams.end(self, _r)

        def getBusParams(self, _ctx=None):
            return _M_RoboCompJointMotor.JointMotor._op_getBusParams.invoke(self, ((), _ctx))

        def begin_getBusParams(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_RoboCompJointMotor.JointMotor._op_getBusParams.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getBusParams(self, _r):
            return _M_RoboCompJointMotor.JointMotor._op_getBusParams.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_RoboCompJointMotor.JointMotorPrx.ice_checkedCast(proxy, '::RoboCompJointMotor::JointMotor', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_RoboCompJointMotor.JointMotorPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::RoboCompJointMotor::JointMotor'
        ice_staticId = staticmethod(ice_staticId)

    _M_RoboCompJointMotor._t_JointMotorPrx = IcePy.defineProxy('::RoboCompJointMotor::JointMotor', JointMotorPrx)

    _M_RoboCompJointMotor._t_JointMotor = IcePy.defineClass('::RoboCompJointMotor::JointMotor', JointMotor, -1, (), True, False, None, (), ())
    JointMotor._ice_type = _M_RoboCompJointMotor._t_JointMotor

    JointMotor._op_setPosition = IcePy.Operation('setPosition', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_RoboCompJointMotor._t_MotorGoalPosition, False, 0),), (), None, (_M_RoboCompJointMotor._t_UnknownMotorException, _M_RoboCompJointMotor._t_HardwareFailedException))
    JointMotor._op_setVelocity = IcePy.Operation('setVelocity', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_RoboCompJointMotor._t_MotorGoalVelocity, False, 0),), (), None, (_M_RoboCompJointMotor._t_UnknownMotorException, _M_RoboCompJointMotor._t_HardwareFailedException))
    JointMotor._op_setSyncPosition = IcePy.Operation('setSyncPosition', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_RoboCompJointMotor._t_MotorGoalPositionList, False, 0),), (), None, (_M_RoboCompJointMotor._t_UnknownMotorException, _M_RoboCompJointMotor._t_HardwareFailedException))
    JointMotor._op_getMotorParams = IcePy.Operation('getMotorParams', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_RoboCompJointMotor._t_MotorParams, False, 0), (_M_RoboCompJointMotor._t_UnknownMotorException,))
    JointMotor._op_getMotorState = IcePy.Operation('getMotorState', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_RoboCompJointMotor._t_MotorState, False, 0), (_M_RoboCompJointMotor._t_UnknownMotorException,))
    JointMotor._op_getMotorStateMap = IcePy.Operation('getMotorStateMap', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_RoboCompJointMotor._t_MotorList, False, 0),), (), ((), _M_RoboCompJointMotor._t_MotorStateMap, False, 0), (_M_RoboCompJointMotor._t_UnknownMotorException,))
    JointMotor._op_getAllMotorState = IcePy.Operation('getAllMotorState', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (((), _M_RoboCompJointMotor._t_MotorStateMap, False, 0),), None, (_M_RoboCompJointMotor._t_UnknownMotorException,))
    JointMotor._op_getAllMotorParams = IcePy.Operation('getAllMotorParams', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_RoboCompJointMotor._t_MotorParamsList, False, 0), ())
    JointMotor._op_getBusParams = IcePy.Operation('getBusParams', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_RoboCompJointMotor._t_BusParams, False, 0), ())

    _M_RoboCompJointMotor.JointMotor = JointMotor
    del JointMotor

    _M_RoboCompJointMotor.JointMotorPrx = JointMotorPrx
    del JointMotorPrx

# End of module RoboCompJointMotor
