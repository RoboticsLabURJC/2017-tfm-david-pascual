# -*- coding: utf-8 -*-
# **********************************************************************
#
# Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.6.3
#
# <auto-generated>
#
# Generated from file `emSensor.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module jderobot
_M_jderobot = Ice.openModule('jderobot')
__name__ = 'jderobot'

if 'State' not in _M_jderobot.__dict__:
    _M_jderobot.State = Ice.createTempClass()
    class State(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    State.Error = State("Error", 0)
    State.OutRange = State("OutRange", 1)
    State.FarRange = State("FarRange", 2)
    State.NearRange = State("NearRange", 3)
    State.Close = State("Close", 4)
    State._enumerators = { 0:State.Error, 1:State.OutRange, 2:State.FarRange, 3:State.NearRange, 4:State.Close }

    _M_jderobot._t_State = IcePy.defineEnum('::jderobot::State', State, (), State._enumerators)

    _M_jderobot.State = State
    del State

if 'EMSensorData' not in _M_jderobot.__dict__:
    _M_jderobot.EMSensorData = Ice.createTempClass()
    class EMSensorData(Ice.Object):
        def __init__(self, status=_M_jderobot.State.Error, d=0.0, tm=0):
            self.status = status
            self.d = d
            self.tm = tm

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::jderobot::EMSensorData')

        def ice_id(self, current=None):
            return '::jderobot::EMSensorData'

        def ice_staticId():
            return '::jderobot::EMSensorData'
        ice_staticId = staticmethod(ice_staticId)

        def __str__(self):
            return IcePy.stringify(self, _M_jderobot._t_EMSensorData)

        __repr__ = __str__

    _M_jderobot.EMSensorDataPrx = Ice.createTempClass()
    class EMSensorDataPrx(Ice.ObjectPrx):

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_jderobot.EMSensorDataPrx.ice_checkedCast(proxy, '::jderobot::EMSensorData', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_jderobot.EMSensorDataPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::jderobot::EMSensorData'
        ice_staticId = staticmethod(ice_staticId)

    _M_jderobot._t_EMSensorDataPrx = IcePy.defineProxy('::jderobot::EMSensorData', EMSensorDataPrx)

    _M_jderobot._t_EMSensorData = IcePy.defineClass('::jderobot::EMSensorData', EMSensorData, -1, (), False, False, None, (), (
        ('status', (), _M_jderobot._t_State, False, 0),
        ('d', (), IcePy._t_float, False, 0),
        ('tm', (), IcePy._t_long, False, 0)
    ))
    EMSensorData._ice_type = _M_jderobot._t_EMSensorData

    _M_jderobot.EMSensorData = EMSensorData
    del EMSensorData

    _M_jderobot.EMSensorDataPrx = EMSensorDataPrx
    del EMSensorDataPrx

if 'EMSensor' not in _M_jderobot.__dict__:
    _M_jderobot.EMSensor = Ice.createTempClass()
    class EMSensor(Ice.Object):
        def __init__(self):
            if Ice.getType(self) == _M_jderobot.EMSensor:
                raise RuntimeError('jderobot.EMSensor is an abstract class')

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::jderobot::EMSensor')

        def ice_id(self, current=None):
            return '::jderobot::EMSensor'

        def ice_staticId():
            return '::jderobot::EMSensor'
        ice_staticId = staticmethod(ice_staticId)

        def getEMSensorData(self, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_jderobot._t_EMSensor)

        __repr__ = __str__

    _M_jderobot.EMSensorPrx = Ice.createTempClass()
    class EMSensorPrx(Ice.ObjectPrx):

        def getEMSensorData(self, _ctx=None):
            return _M_jderobot.EMSensor._op_getEMSensorData.invoke(self, ((), _ctx))

        def begin_getEMSensorData(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_jderobot.EMSensor._op_getEMSensorData.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getEMSensorData(self, _r):
            return _M_jderobot.EMSensor._op_getEMSensorData.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_jderobot.EMSensorPrx.ice_checkedCast(proxy, '::jderobot::EMSensor', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_jderobot.EMSensorPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::jderobot::EMSensor'
        ice_staticId = staticmethod(ice_staticId)

    _M_jderobot._t_EMSensorPrx = IcePy.defineProxy('::jderobot::EMSensor', EMSensorPrx)

    _M_jderobot._t_EMSensor = IcePy.defineClass('::jderobot::EMSensor', EMSensor, -1, (), True, False, None, (), ())
    EMSensor._ice_type = _M_jderobot._t_EMSensor

    EMSensor._op_getEMSensorData = IcePy.Operation('getEMSensorData', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_jderobot._t_EMSensorData, False, 0), ())

    _M_jderobot.EMSensor = EMSensor
    del EMSensor

    _M_jderobot.EMSensorPrx = EMSensorPrx
    del EMSensorPrx

# End of module jderobot
