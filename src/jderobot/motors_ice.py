# -*- coding: utf-8 -*-
# **********************************************************************
#
# Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.6.3
#
# <auto-generated>
#
# Generated from file `motors.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module jderobot
_M_jderobot = Ice.openModule('jderobot')
__name__ = 'jderobot'

if 'Time' not in _M_jderobot.__dict__:
    _M_jderobot.Time = Ice.createTempClass()
    class Time(object):
        def __init__(self, seconds=0, useconds=0):
            self.seconds = seconds
            self.useconds = useconds

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.seconds)
            _h = 5 * _h + Ice.getHash(self.useconds)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_jderobot.Time):
                return NotImplemented
            else:
                if self.seconds is None or other.seconds is None:
                    if self.seconds != other.seconds:
                        return (-1 if self.seconds is None else 1)
                else:
                    if self.seconds < other.seconds:
                        return -1
                    elif self.seconds > other.seconds:
                        return 1
                if self.useconds is None or other.useconds is None:
                    if self.useconds != other.useconds:
                        return (-1 if self.useconds is None else 1)
                else:
                    if self.useconds < other.useconds:
                        return -1
                    elif self.useconds > other.useconds:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_jderobot._t_Time)

        __repr__ = __str__

    _M_jderobot._t_Time = IcePy.defineStruct('::jderobot::Time', Time, (), (
        ('seconds', (), IcePy._t_long),
        ('useconds', (), IcePy._t_long)
    ))

    _M_jderobot.Time = Time
    del Time

# End of module jderobot

# Start of module jderobot
__name__ = 'jderobot'

if 'JderobotException' not in _M_jderobot.__dict__:
    _M_jderobot.JderobotException = Ice.createTempClass()
    class JderobotException(Ice.UserException):
        def __init__(self, what=''):
            self.what = what

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_name = 'jderobot::JderobotException'

    _M_jderobot._t_JderobotException = IcePy.defineException('::jderobot::JderobotException', JderobotException, (), False, None, (('what', (), IcePy._t_string, False, 0),))
    JderobotException._ice_type = _M_jderobot._t_JderobotException

    _M_jderobot.JderobotException = JderobotException
    del JderobotException

if 'ConfigurationNotExistException' not in _M_jderobot.__dict__:
    _M_jderobot.ConfigurationNotExistException = Ice.createTempClass()
    class ConfigurationNotExistException(_M_jderobot.JderobotException):
        def __init__(self, what=''):
            _M_jderobot.JderobotException.__init__(self, what)

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_name = 'jderobot::ConfigurationNotExistException'

    _M_jderobot._t_ConfigurationNotExistException = IcePy.defineException('::jderobot::ConfigurationNotExistException', ConfigurationNotExistException, (), False, _M_jderobot._t_JderobotException, ())
    ConfigurationNotExistException._ice_type = _M_jderobot._t_ConfigurationNotExistException

    _M_jderobot.ConfigurationNotExistException = ConfigurationNotExistException
    del ConfigurationNotExistException

if 'DataNotExistException' not in _M_jderobot.__dict__:
    _M_jderobot.DataNotExistException = Ice.createTempClass()
    class DataNotExistException(_M_jderobot.JderobotException):
        def __init__(self, what=''):
            _M_jderobot.JderobotException.__init__(self, what)

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_name = 'jderobot::DataNotExistException'

    _M_jderobot._t_DataNotExistException = IcePy.defineException('::jderobot::DataNotExistException', DataNotExistException, (), False, _M_jderobot._t_JderobotException, ())
    DataNotExistException._ice_type = _M_jderobot._t_DataNotExistException

    _M_jderobot.DataNotExistException = DataNotExistException
    del DataNotExistException

if 'HardwareFailedException' not in _M_jderobot.__dict__:
    _M_jderobot.HardwareFailedException = Ice.createTempClass()
    class HardwareFailedException(_M_jderobot.JderobotException):
        def __init__(self, what=''):
            _M_jderobot.JderobotException.__init__(self, what)

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_name = 'jderobot::HardwareFailedException'

    _M_jderobot._t_HardwareFailedException = IcePy.defineException('::jderobot::HardwareFailedException', HardwareFailedException, (), False, _M_jderobot._t_JderobotException, ())
    HardwareFailedException._ice_type = _M_jderobot._t_HardwareFailedException

    _M_jderobot.HardwareFailedException = HardwareFailedException
    del HardwareFailedException

if 'NoTopicException' not in _M_jderobot.__dict__:
    _M_jderobot.NoTopicException = Ice.createTempClass()
    class NoTopicException(_M_jderobot.JderobotException):
        def __init__(self, what=''):
            _M_jderobot.JderobotException.__init__(self, what)

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_name = 'jderobot::NoTopicException'

    _M_jderobot._t_NoTopicException = IcePy.defineException('::jderobot::NoTopicException', NoTopicException, (), False, _M_jderobot._t_JderobotException, ())
    NoTopicException._ice_type = _M_jderobot._t_NoTopicException

    _M_jderobot.NoTopicException = NoTopicException
    del NoTopicException

if 'SubscriptionFailedException' not in _M_jderobot.__dict__:
    _M_jderobot.SubscriptionFailedException = Ice.createTempClass()
    class SubscriptionFailedException(_M_jderobot.JderobotException):
        def __init__(self, what=''):
            _M_jderobot.JderobotException.__init__(self, what)

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_name = 'jderobot::SubscriptionFailedException'

    _M_jderobot._t_SubscriptionFailedException = IcePy.defineException('::jderobot::SubscriptionFailedException', SubscriptionFailedException, (), False, _M_jderobot._t_JderobotException, ())
    SubscriptionFailedException._ice_type = _M_jderobot._t_SubscriptionFailedException

    _M_jderobot.SubscriptionFailedException = SubscriptionFailedException
    del SubscriptionFailedException

if 'SubscriptionPushFailedException' not in _M_jderobot.__dict__:
    _M_jderobot.SubscriptionPushFailedException = Ice.createTempClass()
    class SubscriptionPushFailedException(_M_jderobot.JderobotException):
        def __init__(self, what=''):
            _M_jderobot.JderobotException.__init__(self, what)

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_name = 'jderobot::SubscriptionPushFailedException'

    _M_jderobot._t_SubscriptionPushFailedException = IcePy.defineException('::jderobot::SubscriptionPushFailedException', SubscriptionPushFailedException, (), False, _M_jderobot._t_JderobotException, ())
    SubscriptionPushFailedException._ice_type = _M_jderobot._t_SubscriptionPushFailedException

    _M_jderobot.SubscriptionPushFailedException = SubscriptionPushFailedException
    del SubscriptionPushFailedException

# End of module jderobot

# Start of module jderobot
__name__ = 'jderobot'

if '_t_ByteSeq' not in _M_jderobot.__dict__:
    _M_jderobot._t_ByteSeq = IcePy.defineSequence('::jderobot::ByteSeq', (), IcePy._t_byte)

if '_t_IntSeq' not in _M_jderobot.__dict__:
    _M_jderobot._t_IntSeq = IcePy.defineSequence('::jderobot::IntSeq', (), IcePy._t_int)

if '_t_seqFloat' not in _M_jderobot.__dict__:
    _M_jderobot._t_seqFloat = IcePy.defineSequence('::jderobot::seqFloat', (), IcePy._t_float)

# End of module jderobot

# Start of module jderobot
__name__ = 'jderobot'

# End of module jderobot

# Start of module jderobot
__name__ = 'jderobot'

if 'Motors' not in _M_jderobot.__dict__:
    _M_jderobot.Motors = Ice.createTempClass()
    class Motors(Ice.Object):
        """
        Interface to the Gazebo Motors Actuators interaction.
        """
        def __init__(self):
            if Ice.getType(self) == _M_jderobot.Motors:
                raise RuntimeError('jderobot.Motors is an abstract class')

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::jderobot::Motors')

        def ice_id(self, current=None):
            return '::jderobot::Motors'

        def ice_staticId():
            return '::jderobot::Motors'
        ice_staticId = staticmethod(ice_staticId)

        def getV(self, current=None):
            pass

        def setV(self, v, current=None):
            pass

        def getW(self, current=None):
            pass

        def setW(self, w, current=None):
            pass

        def getL(self, current=None):
            pass

        def setL(self, l, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_jderobot._t_Motors)

        __repr__ = __str__

    _M_jderobot.MotorsPrx = Ice.createTempClass()
    class MotorsPrx(Ice.ObjectPrx):

        def getV(self, _ctx=None):
            return _M_jderobot.Motors._op_getV.invoke(self, ((), _ctx))

        def begin_getV(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_jderobot.Motors._op_getV.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getV(self, _r):
            return _M_jderobot.Motors._op_getV.end(self, _r)

        def setV(self, v, _ctx=None):
            return _M_jderobot.Motors._op_setV.invoke(self, ((v, ), _ctx))

        def begin_setV(self, v, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_jderobot.Motors._op_setV.begin(self, ((v, ), _response, _ex, _sent, _ctx))

        def end_setV(self, _r):
            return _M_jderobot.Motors._op_setV.end(self, _r)

        def getW(self, _ctx=None):
            return _M_jderobot.Motors._op_getW.invoke(self, ((), _ctx))

        def begin_getW(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_jderobot.Motors._op_getW.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getW(self, _r):
            return _M_jderobot.Motors._op_getW.end(self, _r)

        def setW(self, w, _ctx=None):
            return _M_jderobot.Motors._op_setW.invoke(self, ((w, ), _ctx))

        def begin_setW(self, w, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_jderobot.Motors._op_setW.begin(self, ((w, ), _response, _ex, _sent, _ctx))

        def end_setW(self, _r):
            return _M_jderobot.Motors._op_setW.end(self, _r)

        def getL(self, _ctx=None):
            return _M_jderobot.Motors._op_getL.invoke(self, ((), _ctx))

        def begin_getL(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_jderobot.Motors._op_getL.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getL(self, _r):
            return _M_jderobot.Motors._op_getL.end(self, _r)

        def setL(self, l, _ctx=None):
            return _M_jderobot.Motors._op_setL.invoke(self, ((l, ), _ctx))

        def begin_setL(self, l, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_jderobot.Motors._op_setL.begin(self, ((l, ), _response, _ex, _sent, _ctx))

        def end_setL(self, _r):
            return _M_jderobot.Motors._op_setL.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_jderobot.MotorsPrx.ice_checkedCast(proxy, '::jderobot::Motors', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_jderobot.MotorsPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::jderobot::Motors'
        ice_staticId = staticmethod(ice_staticId)

    _M_jderobot._t_MotorsPrx = IcePy.defineProxy('::jderobot::Motors', MotorsPrx)

    _M_jderobot._t_Motors = IcePy.defineClass('::jderobot::Motors', Motors, -1, (), True, False, None, (), ())
    Motors._ice_type = _M_jderobot._t_Motors

    Motors._op_getV = IcePy.Operation('getV', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_float, False, 0), ())
    Motors._op_setV = IcePy.Operation('setV', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_float, False, 0),), (), ((), IcePy._t_int, False, 0), ())
    Motors._op_getW = IcePy.Operation('getW', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_float, False, 0), ())
    Motors._op_setW = IcePy.Operation('setW', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_float, False, 0),), (), ((), IcePy._t_int, False, 0), ())
    Motors._op_getL = IcePy.Operation('getL', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_float, False, 0), ())
    Motors._op_setL = IcePy.Operation('setL', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_float, False, 0),), (), ((), IcePy._t_int, False, 0), ())

    _M_jderobot.Motors = Motors
    del Motors

    _M_jderobot.MotorsPrx = MotorsPrx
    del MotorsPrx

# End of module jderobot
